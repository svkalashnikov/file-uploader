export class Block extends BaseComponent<any> {
    static StateConsumerScope: null;
    /** @param {String} [name] */
    static reg(name?: string | undefined): void;
    constructor();
    ctxInit: {
        '*blocksRegistry': Set<Block>;
    };
    init$: {
        '*blocksRegistry': Set<Block>;
    };
    /**
     * @param {String} str
     * @param {{ [key: string]: string | number }} variables
     * @returns {String}
     */
    l10n(str: string, variables?: {
        [key: string]: string | number;
    }): string;
    /**
     * @param {string} key
     * @param {number} count
     * @returns {string}
     */
    pluralize(key: string, count: number): string;
    /** @type {String} */
    activityType: string;
    /**
     * @private
     * @type {String[]}
     */
    private __l10nKeys;
    /**
     * @param {String} localPropKey
     * @param {String} l10nKey
     */
    applyL10nKey(localPropKey: string, l10nKey: string): void;
    /**
     * @param {(block: Block) => boolean} callback
     * @returns {Boolean}
     */
    findBlockInCtx(callback: (block: Block) => boolean): boolean;
    /**
     * @param {String} consumerScope
     * @param {String} prop
     * @param {any} newVal
     */
    setForCtxTarget(consumerScope: string, prop: string, newVal: any): void;
    /** @param {String} activityType */
    setActivity(activityType: string): void;
    _destroyInnerHeightTracker: (() => void) | undefined;
    /**
     * @param {Number} bytes
     * @param {Number} [decimals]
     */
    fileSizeFmt(bytes: number, decimals?: number | undefined): string;
    /**
     * @param {String} url
     * @returns {String}
     */
    proxyUrl(url: string): string;
    updateCtxCssData: () => void;
}
export { BaseComponent };
import { BaseComponent } from '@symbiotejs/symbiote';
//# sourceMappingURL=Block.d.ts.map