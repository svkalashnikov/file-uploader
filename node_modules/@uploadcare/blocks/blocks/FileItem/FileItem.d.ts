export class FileItem extends UploaderBlock {
    /** @private */
    private _entrySubs;
    /** @private */
    private _entry;
    /** @private */
    private _isIntersecting;
    /** @private */
    private _debouncedGenerateThumb;
    /** @private */
    private _debouncedCalculateState;
    /** @private */
    private _renderedOnce;
    cssInit$: {
        '--cfg-use-cloud-image-editor': number;
    };
    init$: {
        uid: string;
        itemName: string;
        errorText: string;
        thumbUrl: string;
        progressValue: number;
        progressVisible: boolean;
        progressUnknown: boolean;
        badgeIcon: string;
        isFinished: boolean;
        isFailed: boolean;
        isUploading: boolean;
        isFocused: boolean;
        isEditable: boolean;
        state: symbol;
        '*uploadTrigger': null;
        onEdit: () => void;
        onRemove: () => void;
        onUpload: () => void;
        '*commonProgress': number;
        '*uploadList': never[];
        '*outputData': null;
        '*focusedEntry': null;
        '*uploadMetadata': null;
        '*currentActivity': string;
        '*currentActivityParams': {};
        '*history': never[];
        '*historyBack': null;
        '*closeModal': () => void;
        '*blocksRegistry': Set<import("../../index.js").Block>;
    };
    _reset(): void;
    /** @private */
    private _observerCallback;
    /** @private */
    private _calculateState;
    /** @private */
    private _generateThumbnail;
    /**
     * @private
     * @param {'success' | 'error'} type
     * @param {String} caption
     * @param {String} text
     */
    private _showMessage;
    /**
     * @private
     * @param {string} prop
     * @param {(value: any) => void} handler
     */
    private _subEntry;
    /**
     * @private
     * @param {String} id
     */
    private _handleEntryId;
    /** @param {(typeof FileItemState)[keyof typeof FileItemState]} state */
    _handleState(state: (typeof FileItemState)[keyof typeof FileItemState]): void;
    /** @private */
    private _observer;
    upload(): Promise<void>;
}
export namespace FileItem {
    const template: string;
    const activeInstances: Set<any>;
}
import { UploaderBlock } from '../../abstract/UploaderBlock.js';
declare const FileItemState: Readonly<{
    FINISHED: symbol;
    FAILED: symbol;
    UPLOADING: symbol;
    IDLE: symbol;
}>;
export {};
//# sourceMappingURL=FileItem.d.ts.map