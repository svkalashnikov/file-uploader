/** @typedef {import('@uploadcare/upload-client').UploadcareFile[]} FileList} */
export class DataOutput extends UploaderBlock {
    init$: {
        output: null;
        filesData: null;
        '*commonProgress': number;
        '*uploadList': never[];
        '*outputData': null;
        '*focusedEntry': null;
        '*uploadMetadata': null;
        '*currentActivity': string;
        '*currentActivityParams': {};
        '*history': never[];
        '*historyBack': null;
        '*closeModal': () => void;
        '*blocksRegistry': Set<import("../../index.js").Block>;
    };
    cssInit$: {
        '--cfg-group-output': number;
    };
    get dict(): {
        SRC_CTX_KEY: string;
        EVENT_NAME: string;
        FIRE_EVENT_ATTR: string;
        CONSOLE_ATTR: string;
        GROUP_ATTR: string;
        FORM_INPUT_ATTR: string;
        INPUT_NAME_ATTR: string;
        INPUT_REQUIRED: string;
    };
    get validationInput(): HTMLInputElement | undefined;
    _dynamicInputsContainer: HTMLDivElement | undefined;
    _validationInputElement: HTMLInputElement | undefined;
}
export namespace DataOutput {
    namespace dict {
        const SRC_CTX_KEY: string;
        const EVENT_NAME: string;
        const FIRE_EVENT_ATTR: string;
        const CONSOLE_ATTR: string;
        const GROUP_ATTR: string;
        const FORM_INPUT_ATTR: string;
        const INPUT_NAME_ATTR: string;
        const INPUT_REQUIRED: string;
    }
    type dict = any;
}
/**
 * }
 */
export type FileList = import('@uploadcare/upload-client').UploadcareFile[];
import { UploaderBlock } from '../../abstract/UploaderBlock.js';
//# sourceMappingURL=DataOutput.d.ts.map