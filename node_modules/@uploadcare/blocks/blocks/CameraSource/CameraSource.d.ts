export class CameraSource extends UploaderBlock {
    activityType: "camera";
    /** @private */
    private _unsubPermissions;
    init$: {
        video: null;
        videoTransformCss: null;
        shotBtnDisabled: boolean;
        videoHidden: boolean;
        messageHidden: boolean;
        requestBtnHidden: boolean;
        l10nMessage: null;
        originalErrorMessage: null;
        cameraSelectOptions: null;
        cameraSelectHidden: boolean;
        onCameraSelectChange: (e: any) => void;
        onCancel: () => void;
        onShot: () => void;
        onRequestPermissions: () => void;
        '*commonProgress': number;
        '*uploadList': never[];
        '*outputData': null;
        '*focusedEntry': null;
        '*uploadMetadata': null;
        '*currentActivity': string;
        '*currentActivityParams': {};
        '*history': never[];
        '*historyBack': null;
        '*closeModal': () => void;
        '*blocksRegistry': Set<import("../../index.js").Block>;
    };
    /** @type {String} */
    _selectedCameraId: string | undefined;
    cssInit$: {
        '--cfg-camera-mirror': number;
    };
    /** @private */
    private _onActivate;
    /** @private */
    private _onDeactivate;
    /** @private */
    private _handlePermissionsChange;
    /**
     * @private
     * @param {'granted' | 'denied' | 'prompt'} state
     */
    private _setPermissionsState;
    /** @private */
    private _subscribePermissions;
    /** @private */
    private _capture;
    /** @private */
    private _canvas;
    /** @private */
    private _ctx;
    /** @private */
    private _capturing;
    /** @private */
    private _stopCapture;
    /** @private */
    private _shot;
    initCallback(): Promise<void>;
}
export namespace CameraSource {
    const template: string;
}
import { UploaderBlock } from '../../abstract/UploaderBlock.js';
//# sourceMappingURL=CameraSource.d.ts.map