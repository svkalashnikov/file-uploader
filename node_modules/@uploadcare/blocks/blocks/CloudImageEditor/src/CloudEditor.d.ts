export class CloudEditor extends Block {
    init$: {
        '*originalUrl': null;
        '*faderEl': null;
        '*cropperEl': null;
        '*imgEl': null;
        '*imgContainerEl': null;
        '*networkProblems': boolean;
        '*imageSize': null;
        '*editorTransformations': import("./types.js").Transformations;
        entry: null;
        extension: null;
        editorMode: boolean;
        modalCaption: string;
        isImage: boolean;
        msg: string;
        src: string;
        fileType: string;
        showLoader: boolean;
        uuid: null;
        cdnUrl: null;
        'presence.networkProblems': boolean;
        'presence.modalCaption': boolean;
        'presence.editorToolbar': boolean;
        'presence.viewerToolbar': boolean;
        '*on.retryNetwork': () => void;
        '*on.apply': (transformations: any) => void;
        '*on.cancel': () => void;
        '*blocksRegistry': Set<Block>;
    };
    /** @private */
    private _debouncedShowLoader;
    _showLoader(show: any): void;
    /**
     * To proper work, we need non-zero size the element. So, we'll wait for it.
     *
     * @private
     * @returns {Promise<void>}
     */
    private _waitForSize;
    cssInit$: {
        '--cfg-cdn-cname': string;
    };
    connectedCallback(): Promise<void>;
    _imgLoading: boolean | undefined;
}
export namespace CloudEditor {
    export { TEMPLATE as template };
}
import { Block } from '../../../abstract/Block.js';
import { TEMPLATE } from './template.js';
//# sourceMappingURL=CloudEditor.d.ts.map