/**
 * @param {SVGElement} node
 * @param {{ [key: String]: String | Number }} attrs
 */
export function setSvgNodeAttrs(node: SVGElement, attrs: {
    [key: string]: string | number;
}): void;
/**
 * @param {String} name
 * @param {{ [key: String]: String | Number }} attrs
 * @returns {SVGElement}
 */
export function createSvgNode(name: string, attrs?: {
    [key: string]: string | number;
}): SVGElement;
/**
 * @param {import('./types.js').Rectangle} rect
 * @param {String} direction
 */
export function cornerPath(rect: import('./types.js').Rectangle, direction: string): {
    d: string;
    center: number[];
};
/**
 * @param {import('./types.js').Rectangle} rect
 * @param {String} direction
 */
export function sidePath(rect: import('./types.js').Rectangle, direction: string): {
    d: string;
    center: number[];
};
/** @param {String} direction */
export function thumbCursor(direction: string): "move" | "ew-resize" | "ns-resize" | "nwse-resize" | "nesw-resize";
/**
 * @param {import('./types.js').Rectangle} rect
 * @param {[Number, Number]} delta
 */
export function moveRect(rect: import('./types.js').Rectangle, [dx, dy]: [number, number]): {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * @param {import('./types.js').Rectangle} rect1
 * @param {import('./types.js').Rectangle} rect2
 */
export function constraintRect(rect1: import('./types.js').Rectangle, rect2: import('./types.js').Rectangle): {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * @param {import('./types.js').Rectangle} rect
 * @param {[Number, Number]} delta
 * @param {String} direction
 */
export function expandRect(rect: import('./types.js').Rectangle, [dx, dy]: [number, number], direction: string): {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * @param {import('./types.js').Rectangle} rect1
 * @param {import('./types.js').Rectangle} rect2
 */
export function intersectionRect(rect1: import('./types.js').Rectangle, rect2: import('./types.js').Rectangle): {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * @param {import('./types.js').Rectangle} rect
 * @param {[Number, Number]} minSize
 * @param {String} direction
 */
export function minRectSize(rect: import('./types.js').Rectangle, [minWidth, minHeight]: [number, number], direction: string): {
    x: number;
    y: number;
    width: number;
    height: number;
};
/**
 * @param {import('./types.js').Rectangle} rect
 * @param {[Number, Number]} point
 */
export function rectContainsPoint(rect: import('./types.js').Rectangle, [x, y]: [number, number]): boolean;
//# sourceMappingURL=crop-utils.d.ts.map